import React, { useState } from 'react';
import { Card, Button, Form, Input, Select, Slider, Tag, Timeline, Modal } from 'antd';
import { BookOutlined, ClockCircleOutlined, TargetOutlined, CheckCircleOutlined } from '@ant-design/icons';
import { motion } from 'framer-motion';
import aiService from '../../services/aiService';
import toast from 'react-hot-toast';

const { Option } = Select;
const { TextArea } = Input;

export default function StudyPlanGenerator({ onPlanGenerated }) {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [visible, setVisible] = useState(false);
  const [generatedPlan, setGeneratedPlan] = useState(null);

  const subjects = [
    { value: 'to√°n', label: 'üìê To√°n h·ªçc', color: 'blue' },
    { value: 'l√Ω', label: '‚öóÔ∏è V·∫≠t l√Ω', color: 'purple' },
    { value: 'h√≥a', label: 'üß™ H√≥a h·ªçc', color: 'green' },
    { value: 'sinh', label: 'üå± Sinh h·ªçc', color: 'cyan' },
    { value: 'vƒÉn', label: 'üìù Ng·ªØ vƒÉn', color: 'red' },
    { value: 'anh', label: 'üá¨üáß Ti·∫øng Anh', color: 'orange' },
    { value: 'l·ªãch s·ª≠', label: 'üìö L·ªãch s·ª≠', color: 'gold' },
    { value: 'ƒë·ªãa l√Ω', label: 'üåç ƒê·ªãa l√Ω', color: 'lime' },
  ];

  const studyLevels = [
    { value: 'grade-6', label: 'L·ªõp 6' },
    { value: 'grade-7', label: 'L·ªõp 7' },
    { value: 'grade-8', label: 'L·ªõp 8' },
    { value: 'grade-9', label: 'L·ªõp 9' },
    { value: 'grade-10', label: 'L·ªõp 10' },
    { value: 'grade-11', label: 'L·ªõp 11' },
    { value: 'grade-12', label: 'L·ªõp 12' },
  ];

  const handleGeneratePlan = async (values) => {
    setLoading(true);
    try {
      // Create a detailed prompt for AI
      const prompt = `T·∫°o k·∫ø ho·∫°ch h·ªçc t·∫≠p chi ti·∫øt cho h·ªçc sinh v·ªõi th√¥ng tin sau:

**Th√¥ng tin h·ªçc sinh:**
- C·∫•p ƒë·ªô: ${values.level}
- M√¥n h·ªçc quan t√¢m: ${values.subjects.join(', ')}
- Th·ªùi gian h·ªçc m·ªói ng√†y: ${values.timePerDay} ti·∫øng
- M·ª•c ti√™u: ${values.goals}
- Phong c√°ch h·ªçc: ${values.studyStyle}
- Th·ªùi gian c√≥ s·∫µn: ${values.availableTime}

**Y√™u c·∫ßu:**
1. L·ªãch h·ªçc h√†ng tu·∫ßn c·ª• th·ªÉ
2. Ph√¢n b·ªï th·ªùi gian cho t·ª´ng m√¥n
3. Ph∆∞∆°ng ph√°p h·ªçc hi·ªáu qu·∫£ cho t·ª´ng m√¥n
4. M·ªëc ki·ªÉm tra ti·∫øn ƒë·ªô
5. G·ª£i √Ω t√†i li·ªáu v√† ngu·ªìn h·ªçc

H√£y t·∫°o k·∫ø ho·∫°ch th·ª±c t·∫ø, d·ªÖ th·ª±c hi·ªán v√† hi·ªáu qu·∫£.`;

      const response = await aiService.getChatResponse(prompt);
      
      // Parse the response or use the generateStudyPlan method
      const planData = await aiService.generateStudyPlan(values);
      
      setGeneratedPlan({
        aiResponse: response,
        structuredPlan: planData,
        userInputs: values
      });
      
      toast.success('üéØ K·∫ø ho·∫°ch h·ªçc t·∫≠p ƒë√£ ƒë∆∞·ª£c t·∫°o!', {
        duration: 3000,
      });

      if (onPlanGenerated) {
        onPlanGenerated({
          aiResponse: response,
          plan: planData
        });
      }

    } catch (error) {
      console.error('Error generating study plan:', error);
      toast.error('C√≥ l·ªói khi t·∫°o k·∫ø ho·∫°ch h·ªçc t·∫≠p', {
        duration: 3000,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Card
        title={
          <div className="flex items-center gap-2">
            <TargetOutlined className="text-blue-500" />
            <span>T·∫°o K·∫ø Ho·∫°ch H·ªçc T·∫≠p AI</span>
          </div>
        }
        className="mb-4"
        extra={
          <Button 
            type="primary" 
            onClick={() => setVisible(true)}
            className="bg-gradient-to-r from-blue-500 to-purple-600 border-none"
          >
            T·∫°o K·∫ø Ho·∫°ch M·ªõi
          </Button>
        }
      >
        <div className="text-gray-600">
          ü§ñ S·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch h·ªçc t·∫≠p c√° nh√¢n h√≥a ph√π h·ª£p v·ªõi m·ª•c ti√™u v√† th·ªùi gian c·ªßa b·∫°n.
        </div>
      </Card>

      <Modal
        title={
          <div className="flex items-center gap-2">
            <TargetOutlined className="text-blue-500" />
            <span>T·∫°o K·∫ø Ho·∫°ch H·ªçc T·∫≠p V·ªõi AI</span>
          </div>
        }
        open={visible}
        onCancel={() => setVisible(false)}
        width={800}
        footer={null}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleGeneratePlan}
          className="mt-4"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Form.Item
              name="level"
              label="C·∫•p ƒë·ªô h·ªçc t·∫≠p"
              rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn c·∫•p ƒë·ªô' }]}
            >
              <Select placeholder="Ch·ªçn l·ªõp ƒëang h·ªçc">
                {studyLevels.map(level => (
                  <Option key={level.value} value={level.value}>
                    {level.label}
                  </Option>
                ))}
              </Select>
            </Form.Item>

            <Form.Item
              name="timePerDay"
              label="Th·ªùi gian h·ªçc m·ªói ng√†y (gi·ªù)"
              rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn th·ªùi gian' }]}
            >
              <Slider
                min={1}
                max={8}
                marks={{
                  1: '1h',
                  2: '2h',
                  4: '4h',
                  6: '6h',
                  8: '8h'
                }}
                tooltip={{ formatter: (value) => `${value} gi·ªù` }}
              />
            </Form.Item>
          </div>

          <Form.Item
            name="subjects"
            label="M√¥n h·ªçc quan t√¢m"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√¥n h·ªçc' }]}
          >
            <Select
              mode="multiple"
              placeholder="Ch·ªçn c√°c m√¥n h·ªçc b·∫°n mu·ªën t·∫≠p trung"
              optionLabelProp="label"
            >
              {subjects.map(subject => (
                <Option key={subject.value} value={subject.value} label={subject.label}>
                  <Tag color={subject.color}>{subject.label}</Tag>
                </Option>
              ))}
            </Select>
          </Form.Item>

          <Form.Item
            name="goals"
            label="M·ª•c ti√™u h·ªçc t·∫≠p"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m·ª•c ti√™u' }]}
          >
            <TextArea
              rows={3}
              placeholder="V√≠ d·ª•: Chu·∫©n b·ªã thi v√†o l·ªõp 10, n√¢ng cao ƒëi·ªÉm to√°n v√† l√Ω, √¥n t·∫≠p k·ª≥ thi cu·ªëi nƒÉm..."
            />
          </Form.Item>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Form.Item
              name="studyStyle"
              label="Phong c√°ch h·ªçc t·∫≠p"
            >
              <Select placeholder="C√°ch b·∫°n th√≠ch h·ªçc">
                <Option value="visual">üëÅÔ∏è H·ªçc qua h√¨nh ·∫£nh</Option>
                <Option value="auditory">üëÇ H·ªçc qua nghe</Option>
                <Option value="kinesthetic">‚úã H·ªçc qua th·ª±c h√†nh</Option>
                <Option value="reading">üìñ H·ªçc qua ƒë·ªçc vi·∫øt</Option>
                <Option value="mixed">üé® K·∫øt h·ª£p nhi·ªÅu c√°ch</Option>
              </Select>
            </Form.Item>

            <Form.Item
              name="availableTime"
              label="Th·ªùi gian r·∫£nh"
            >
              <Select placeholder="Khi n√†o b·∫°n c√≥ th·ªÉ h·ªçc">
                <Option value="morning">üåÖ S√°ng s·ªõm</Option>
                <Option value="afternoon">‚òÄÔ∏è Chi·ªÅu</Option>
                <Option value="evening">üåÜ T·ªëi</Option>
                <Option value="weekend">üìÖ Cu·ªëi tu·∫ßn</Option>
                <Option value="flexible">‚è∞ Linh ho·∫°t</Option>
              </Select>
            </Form.Item>
          </div>

          <div className="flex justify-end gap-2 mt-6">
            <Button onClick={() => setVisible(false)}>
              H·ªßy
            </Button>
            <Button 
              type="primary" 
              htmlType="submit" 
              loading={loading}
              className="bg-gradient-to-r from-blue-500 to-purple-600 border-none"
            >
              {loading ? 'ƒêang t·∫°o k·∫ø ho·∫°ch...' : 'üéØ T·∫°o K·∫ø Ho·∫°ch'}
            </Button>
          </div>
        </Form>
      </Modal>

      {/* Display Generated Plan */}
      {generatedPlan && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mt-4"
        >
          <Card
            title={
              <div className="flex items-center gap-2">
                <CheckCircleOutlined className="text-green-500" />
                <span>K·∫ø Ho·∫°ch H·ªçc T·∫≠p ƒê∆∞·ª£c T·∫°o</span>
              </div>
            }
            className="border-green-200"
          >
            <div className="space-y-4">
              {/* AI Response */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-semibold mb-2 flex items-center gap-2">
                  ü§ñ L·ªùi khuy√™n t·ª´ AI:
                </h4>
                <div className="whitespace-pre-wrap text-gray-700">
                  {generatedPlan.aiResponse}
                </div>
              </div>

              {/* Structured Plan */}
              {generatedPlan.structuredPlan && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card size="small" title="üìÖ L·ªãch H·ªçc H√†ng Tu·∫ßn">
                    <Timeline
                      items={generatedPlan.structuredPlan.schedule?.map(item => ({
                        children: (
                          <div>
                            <div className="font-medium">{item.subject}</div>
                            <div className="text-sm text-gray-500">
                              {item.time} - {item.frequency}
                            </div>
                          </div>
                        )
                      })) || []}
                    />
                  </Card>

                  <Card size="small" title="üí° G·ª£i √ù H·ªçc T·∫≠p">
                    <ul className="space-y-2">
                      {generatedPlan.structuredPlan.tips?.map((tip, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-blue-500 mt-1">‚Ä¢</span>
                          <span className="text-sm">{tip}</span>
                        </li>
                      )) || []}
                    </ul>
                  </Card>
                </div>
              )}
            </div>
          </Card>
        </motion.div>
      )}
    </>
  );
}